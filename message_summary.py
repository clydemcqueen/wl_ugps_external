#!/usr/bin/env python3

"""
Read a log (txt) file generated by nmea_injector.py and summarize NMEA messages received.
"""

import argparse
import re
from datetime import datetime


# Used to pre-seed the list of messages
# Type descriptions are from https://gpsd.gitlab.io/gpsd/NMEA.html
EXPECTED_MESSAGES = {
    '$YDDBS': 'Depth below surface',
    '$YDDBT': 'Depth below transducer',
    '$YDDPT': 'Depth of water',
    '$YDGLL': 'Geographic position lat/lon',
    '$YDGRS': 'GPS range residuals',
    '$YDGSA': 'GPS DOP and active satellites',
    '$YDGSV': 'Satellites in view',
    '$YDHDG': 'Heading, deviation and variation',
    '$YDHDM': 'Heading, magnetic',
    '$YDHDT': 'Heading, true',
    '$YDGGA': 'Global positioning system fix data',
    '$YDMDA': 'Meteorological composite',
    '$YDMTW': 'Mean temperature of water',
    '$YDRMC': 'Recommended minimum navigation information',
    '$YDROT': 'Rate of turn',
    '$YDVTG': 'Track made good and ground speed',
    '$YDZDA': 'Time and date',
}


def get_timestamp(line: str):
    match = re.search(r'^[^|]+', line)
    return datetime.strptime(match[0], '%Y-%m-%d %H:%M:%S.%f ')


def process(filename: str):
    file = open(filename, 'r')
    line = file.readline()

    if line == '':
        print('Empty file')
        return

    # Count messages
    total = 0

    # Count per type. See the list of types (not required).
    counts = {}
    for expected in EXPECTED_MESSAGES.keys():
        counts[expected] = 0

    # Get the first and last timestamp to compute duration and message rates
    start = get_timestamp(line)

    prev_line = line
    while line := file.readline():
        match = re.search(r'\$[A-Z]+', line)
        if match is not None:
            total += 1
            sentence_type = match[0]

            if sentence_type not in EXPECTED_MESSAGES:
                print(f'new message: {sentence_type}')
                EXPECTED_MESSAGES[sentence_type] = 'Unknown'
                counts[sentence_type] = 0

            counts[sentence_type] += 1
        prev_line = line

    duration = get_timestamp(prev_line) - start

    print(f'{total} sentences received in {duration.seconds} seconds')
    if total > 0:
        print('Type    Count     Hz  Description')
        for count_item in sorted(counts.items()):
            print(f'{count_item[0] :6} {count_item[1] :6} {count_item[1] / duration.seconds :6.2f}  {EXPECTED_MESSAGES[count_item[0]]}')


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('path', nargs='+')
    args = parser.parse_args()

    print(f'Processing {len(args.path)} files')
    for filename in args.path:
        print('-------------------')
        print(filename)
        process(filename)


if __name__ == '__main__':
    main()
