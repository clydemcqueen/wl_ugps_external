#!/usr/bin/env python3

"""
Read a log (txt) file generated by nmea_injector.py and summarize NMEA messages received.
"""

import argparse
import re
from datetime import datetime


# Type descriptions are from https://gpsd.gitlab.io/gpsd/NMEA.html
MESSAGE_DESCRIPTIONS = {
    'DBS': 'Depth below surface',
    'DBT': 'Depth below transducer',
    'DPT': 'Depth of water',
    'GLL': 'Geographic position lat/lon',
    'GRS': 'GPS range residuals',
    'GSA': 'GPS DOP and active satellites',
    'GSV': 'Satellites in view',
    'HDG': 'Heading, deviation and variation',
    'HDM': 'Heading, magnetic',
    'HDT': 'Heading, true',
    'GGA': 'Global positioning system fix data',
    'MDA': 'Meteorological composite',
    'MTW': 'Mean temperature of water',
    'RMC': 'Recommended minimum navigation information',
    'ROT': 'Rate of turn',
    'VTG': 'Track made good and ground speed',
    'ZDA': 'Time and date',
}


def get_description(sentence_type: str) -> str:
    for suffix, description in MESSAGE_DESCRIPTIONS.items():
        if sentence_type.endswith(suffix):
            return description
    return "Unknown"


def get_timestamp(line: str):
    match = re.search(r'^[^|]+', line)
    return datetime.strptime(match[0], '%Y-%m-%d %H:%M:%S.%f ')


def process(filename: str):
    file = open(filename, 'r')
    line = file.readline()

    if line == '':
        print('Empty file')
        return

    # Count messages
    total = 0

    # Count per type.
    counts = {}

    # Get the first and last timestamp to compute duration and message rates
    start = get_timestamp(line)

    prev_line = line
    while line := file.readline():
        match = re.search(r'\$[A-Z]+', line)
        if match is not None:
            total += 1
            sentence_type = match[0]

            if sentence_type not in counts:
                counts[sentence_type] = 0

            counts[sentence_type] += 1
        prev_line = line

    duration = get_timestamp(prev_line) - start

    print(f'{total} sentences received in {duration.seconds} seconds')
    if total > 0:
        print('Type    Count     Hz  Description')
        for sentence_type, count in sorted(counts.items()):
            print(f'{sentence_type :6} {count :6} {count / duration.seconds :6.2f}  {get_description(sentence_type)}')


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('path', nargs='+')
    args = parser.parse_args()

    print(f'Processing {len(args.path)} files')
    for filename in args.path:
        print('-------------------')
        print(filename)
        process(filename)


if __name__ == '__main__':
    main()
